// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/viniosilva/swordhealth-api/internal/service (interfaces: NotificationService)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/viniosilva/swordhealth-api/internal/model"
)

// MockNotificationService is a mock of NotificationService interface.
type MockNotificationService struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationServiceMockRecorder
}

// MockNotificationServiceMockRecorder is the mock recorder for MockNotificationService.
type MockNotificationServiceMockRecorder struct {
	mock *MockNotificationService
}

// NewMockNotificationService creates a new mock instance.
func NewMockNotificationService(ctrl *gomock.Controller) *MockNotificationService {
	mock := &MockNotificationService{ctrl: ctrl}
	mock.recorder = &MockNotificationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationService) EXPECT() *MockNotificationServiceMockRecorder {
	return m.recorder
}

// NotifyAdminUserOnSaveTask mocks base method.
func (m *MockNotificationService) NotifyAdminUserOnSaveTask(arg0 context.Context, arg1 *model.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyAdminUserOnSaveTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyAdminUserOnSaveTask indicates an expected call of NotifyAdminUserOnSaveTask.
func (mr *MockNotificationServiceMockRecorder) NotifyAdminUserOnSaveTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyAdminUserOnSaveTask", reflect.TypeOf((*MockNotificationService)(nil).NotifyAdminUserOnSaveTask), arg0, arg1)
}
